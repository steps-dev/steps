// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// shuffle_vec
IntegerVector shuffle_vec(int min, int max);
RcppExport SEXP _steps_shuffle_vec(SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_vec(min, max));
    return rcpp_result_gen;
END_RCPP
}
// can_source_cell_disperse
IntegerVector can_source_cell_disperse(int source_y, int source_x, NumericMatrix iterative_population_state, NumericMatrix future_population_state, NumericMatrix carrying_capacity_available, NumericMatrix permeability_map, int max_cells, int min_cells);
RcppExport SEXP _steps_can_source_cell_disperse(SEXP source_ySEXP, SEXP source_xSEXP, SEXP iterative_population_stateSEXP, SEXP future_population_stateSEXP, SEXP carrying_capacity_availableSEXP, SEXP permeability_mapSEXP, SEXP max_cellsSEXP, SEXP min_cellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source_y(source_ySEXP);
    Rcpp::traits::input_parameter< int >::type source_x(source_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type iterative_population_state(iterative_population_stateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type future_population_state(future_population_stateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type carrying_capacity_available(carrying_capacity_availableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type permeability_map(permeability_mapSEXP);
    Rcpp::traits::input_parameter< int >::type max_cells(max_cellsSEXP);
    Rcpp::traits::input_parameter< int >::type min_cells(min_cellsSEXP);
    rcpp_result_gen = Rcpp::wrap(can_source_cell_disperse(source_y, source_x, iterative_population_state, future_population_state, carrying_capacity_available, permeability_map, max_cells, min_cells));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dispersal
List rcpp_dispersal(NumericMatrix starting_population_state, NumericMatrix potential_carrying_capacity, NumericMatrix permeability_map, int max_cells, int min_cells, double dispersal_proportion);
RcppExport SEXP _steps_rcpp_dispersal(SEXP starting_population_stateSEXP, SEXP potential_carrying_capacitySEXP, SEXP permeability_mapSEXP, SEXP max_cellsSEXP, SEXP min_cellsSEXP, SEXP dispersal_proportionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type starting_population_state(starting_population_stateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type potential_carrying_capacity(potential_carrying_capacitySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type permeability_map(permeability_mapSEXP);
    Rcpp::traits::input_parameter< int >::type max_cells(max_cellsSEXP);
    Rcpp::traits::input_parameter< int >::type min_cells(min_cellsSEXP);
    Rcpp::traits::input_parameter< double >::type dispersal_proportion(dispersal_proportionSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dispersal(starting_population_state, potential_carrying_capacity, permeability_map, max_cells, min_cells, dispersal_proportion));
    return rcpp_result_gen;
END_RCPP
}
// fast_match
std::vector<int> fast_match(IntegerVector x, IntegerVector y);
RcppExport SEXP _steps_fast_match(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fast_match(x, y));
    return rcpp_result_gen;
END_RCPP
}
// pmax_zero
NumericVector pmax_zero(NumericVector X);
RcppExport SEXP _steps_pmax_zero(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(pmax_zero(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_steps_shuffle_vec", (DL_FUNC) &_steps_shuffle_vec, 2},
    {"_steps_can_source_cell_disperse", (DL_FUNC) &_steps_can_source_cell_disperse, 8},
    {"_steps_rcpp_dispersal", (DL_FUNC) &_steps_rcpp_dispersal, 6},
    {"_steps_fast_match", (DL_FUNC) &_steps_fast_match, 2},
    {"_steps_pmax_zero", (DL_FUNC) &_steps_pmax_zero, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_steps(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
